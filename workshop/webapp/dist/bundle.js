(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();const t=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))},n=function(e){return new this((function(t,n){if(!e||void 0===e.length)return n(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var i=r.length;function o(e,n){if(n&&("object"==typeof n||"function"==typeof n)){var l=n.then;if("function"==typeof l)return void l.call(n,(function(t){o(e,t)}),(function(n){r[e]={status:"rejected",reason:n},0==--i&&t(r)}))}r[e]={status:"fulfilled",value:n},0==--i&&t(r)}for(var l=0;l<r.length;l++)o(l,r[l])}))};var r=setTimeout;function i(e){return Boolean(e&&void 0!==e.length)}function o(){}function l(e){if(!(this instanceof l))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],d(e,this)}function s(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,l._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value)}catch(e){return void a(t.promise,e)}u(t.promise,r)}else(1===e._state?u:a)(t.promise,e._value)}))):e._deferreds.push(t)}function u(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof l)return e._state=3,e._value=t,void c(e);if("function"==typeof n)return void d((r=n,i=t,function(){r.apply(i,arguments)}),e)}e._state=1,e._value=t,c(e)}catch(t){a(e,t)}var r,i}function a(e,t){e._state=2,e._value=t,c(e)}function c(e){2===e._state&&0===e._deferreds.length&&l._immediateFn((function(){e._handled||l._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)s(e,e._deferreds[t]);e._deferreds=null}function f(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function d(e,t){var n=!1;try{e((function(e){n||(n=!0,u(t,e))}),(function(e){n||(n=!0,a(t,e))}))}catch(e){if(n)return;n=!0,a(t,e)}}l.prototype.catch=function(e){return this.then(null,e)},l.prototype.then=function(e,t){var n=new this.constructor(o);return s(this,new f(e,t,n)),n},l.prototype.finally=t,l.all=function(e){return new l((function(t,n){if(!i(e))return n(new TypeError("Promise.all accepts an array"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function l(e,i){try{if(i&&("object"==typeof i||"function"==typeof i)){var s=i.then;if("function"==typeof s)return void s.call(i,(function(t){l(e,t)}),n)}r[e]=i,0==--o&&t(r)}catch(e){n(e)}}for(var s=0;s<r.length;s++)l(s,r[s])}))},l.allSettled=n,l.resolve=function(e){return e&&"object"==typeof e&&e.constructor===l?e:new l((function(t){t(e)}))},l.reject=function(e){return new l((function(t,n){n(e)}))},l.race=function(e){return new l((function(t,n){if(!i(e))return n(new TypeError("Promise.race accepts an array"));for(var r=0,o=e.length;r<o;r++)l.resolve(e[r]).then(t,n)}))},l._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){r(e,0)},l._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};const p=l;var h=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e.g)return e.g;throw new Error("unable to locate global object")}();"function"!=typeof h.Promise?h.Promise=p:(h.Promise.prototype.finally||(h.Promise.prototype.finally=t),h.Promise.allSettled||(h.Promise.allSettled=n));var v={btnCreateList:document.getElementById("btn-create-list"),btnLoadList:document.getElementById("btn-load-list"),btnHelp:document.getElementById("btn-help"),screenHome:document.getElementById("screen-home"),screenComputeList:document.getElementById("screen-compute-list"),screenNewList:document.getElementById("screen-new-list")},m=function(){this.eventListenerNewList=function(){v.btnCreateList.addEventListener("click",(function(){v.screenHome.classList.add("hide-screen"),v.screenNewList.classList.remove("hide-screen")}))},this.eventListenerNewList()},y={newList:document.getElementById("new-list"),btnComputeList:document.getElementById("btn-compute-list")},b={testCombinations:document.getElementById("prtz-test-combinations"),testLogs:document.getElementById("prtz-test-logs"),testListSorted:document.getElementById("test-list-sorted"),testTimeLeft:document.getElementById("test-time-left")},w=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},g=function(e,t,n,r,i,o,l,s){var u,a;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===r&&(r=null),void 0===i&&(i=null),void 0===o&&(o=null),void 0===l&&(l=null),void 0===s&&(s=null);var c=document.createElement("div");if(null!==e&&(c.id=e),null!==t)try{for(var f=w(t),d=f.next();!d.done;d=f.next()){var p=d.value;c.classList.add(p)}}catch(e){u={error:e}}finally{try{d&&!d.done&&(a=f.return)&&a.call(f)}finally{if(u)throw u.error}}if(null!==n&&(c.style.cssText=n),null!==r)for(var h in r)c.setAttribute("data-"+h,r[h]);return null!==i&&(c.innerHTML=i),null!==i&&(c.innerHTML=i),null!==o&&(c.innerText=o),null!=l&&("true"==l?c.contentEditable="true":"false"==l&&(c.contentEditable="false")),null!==s&&c.appendChild(s),c},L=function(e,t,n,r,i,o,l,s){var u,a;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===r&&(r=null),void 0===i&&(i=null),void 0===o&&(o=null),void 0===l&&(l=null),void 0===s&&(s=null);var c=document.createElement("button");if(null!==e&&(c.id=e),null!==t)try{for(var f=w(t),d=f.next();!d.done;d=f.next()){var p=d.value;c.classList.add(p)}}catch(e){u={error:e}}finally{try{d&&!d.done&&(a=f.return)&&a.call(f)}finally{if(u)throw u.error}}if(null!==n&&(c.style.cssText=n),null!==r)for(var h in r)c.setAttribute("data-"+h,r[h]);return null!==i&&(c.title=i),null!==o&&(c.innerHTML=o),null!==o&&(c.innerHTML=o),null!==l&&(c.innerText=l),null!==s&&c.appendChild(s),c},x=function(e,t,n,r,i,o,l){var s,u;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===r&&(r=null),void 0===i&&(i=null),void 0===o&&(o=null),void 0===l&&(l=null);var a=document.createElement("p");if(null!==e&&(a.id=e),null!==t)try{for(var c=w(t),f=c.next();!f.done;f=c.next()){var d=f.value;a.classList.add(d)}}catch(e){s={error:e}}finally{try{f&&!f.done&&(u=c.return)&&u.call(c)}finally{if(s)throw s.error}}if(null!==n&&(a.style.cssText=n),null!==r)for(var p in r)a.setAttribute("data-"+p,r[p]);return null!==i&&(a.innerHTML=i),null!==i&&(a.innerHTML=i),null!==o&&(a.innerText=o),null!==l&&a.appendChild(l),a},C=function(e,t){var n=JSON.stringify(t);return-1==JSON.stringify(e).indexOf(n)},T=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},S=function(){function e(e){var t=this;this.launch=function(){t.generateAllPairs(),t.initQuestions()},this.computeCouples=function(){var e,n;t.couplesToCompute=[];var r=t.questionStep,i=t.questionStep+t.questionIter;try{for(var o=T(function(e,t,n){var r;return void 0===e&&(e=0),void 0===t&&(t=null),void 0===n&&(n=1),function(e,t){var n,r,i,o,l={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,r=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((i=(i=l.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){l.label=o[1];break}if(6===o[0]&&l.label<i[1]){l.label=i[1],i=o;break}if(i&&l.label<i[2]){l.label=i[2],l.ops.push(o);break}i[2]&&l.ops.pop(),l.trys.pop();continue}o=t.call(e,l)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(i){switch(i.label){case 0:null==t&&(t=e,e=0),r=e,i.label=1;case 1:return r<t?[4,r]:[3,4];case 2:i.sent(),i.label=3;case 3:return r+=n,[3,1];case 4:return[2]}}))}(t.questionStep,Object.keys(t.list).length,t.questionIter)),l=o.next();!l.done;l=o.next()){l.value;var s=[r,i];-1==t.pairsComputed.indexOf(s.join("_"))&&i<=Object.keys(t.list).length&&t.couplesToCompute.push(s),r=i,i+=t.questionIter}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}t.questionIter+=1,0==t.couplesToCompute.length&&t.generateCouples()},this.generateCouples=function(){t.questionStep+t.questionIter<=Object.keys(t.list).length?t.computeCouples():t.questionStep!=Object.keys(t.list).length-1&&(t.questionStep+=1,t.questionIter=1,t.computeCouples())},this.initQuestions=function(){var e=new Promise((function(e,n){t.generateCouples(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.writeButtons()}))},this.writeButtons=function(){var e,n;if(b.testCombinations.innerHTML="",t.couplesToCompute.length>0){var r=1,i=function(e){var n;n=1==r?"show":"hidden";var i="btn-wrapper-"+r.toString(),o=e.join("_"),l=([e[1],e[0]].join("_"),g(i,["btn-wrapper","d-flex","flex-column",n])),s=g(null,["d-flex","justify-content-center"]),u=g(null,["d-flex","justify-content-center"]),a=L(null,["btn","btn-primary","btn1"],null,{id:e[0],couple:o,iter:r.toString()},null,null,t.list[e[0]]),c=L(null,["btn","btn-primary","btn2"],null,{id:e[1],couple:o,iter:r.toString()},null,null,t.list[e[1]]);a.addEventListener("click",(function(){t.computeChoiceAndLoadNext(a)})),c.addEventListener("click",(function(){t.computeChoiceAndLoadNext(c)})),s.appendChild(a),u.appendChild(c),l.appendChild(s),l.appendChild(u),b.testCombinations.appendChild(l),r+=1};try{for(var o=T(t.couplesToCompute),l=o.next();!l.done;l=o.next())i(l.value)}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}}else t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2==0?t.computePriorities():console.error("Il ne devrait pas rester des paires non calculées. Or, il en reste",t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2)},this.computeAndWriteTimeLeft=function(){var e=new Promise((function(e,n){t.computeTimeLeft(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.writeTimeLeft()}))},this.computeTimeLeft=function(){var e=t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2*5;t.timeleft=function(e){var t=new Date(null);t.setSeconds(e);var n=t.toISOString().substring(11,19).split(":");return n[0]+"h "+n[1]+"mn "+n[2]+"s"}(e)},this.writeTimeLeft=function(){b.testTimeLeft.innerHTML="<b>Temps restant : </b>"+t.timeleft},this.computeChoiceAndLoadNext=function(e){var n=new Promise((function(n,r){var i=e.dataset.couple.split("_"),o=[i[1],i[0]].join("_");t.recordChoice(e.dataset.couple,o,e.dataset.id),n("Couples generated."),r("Couples not generated.")}));n.then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1?t.showNextCouple(e):t.computeAndLoadNextStep()})).then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1&&t.computeAndWriteTimeLeft()}))},this.recordChoice=function(e,n,r){var i=e.split("_");i[0]==r?t.pairSequences.push([i[0],i[1]]):t.pairSequences.push([i[1],i[0]]),-1==t.pairsComputed.indexOf(e)&&t.pairsComputed.push(e),-1==t.pairsComputed.indexOf(n)&&t.pairsComputed.push(n)},this.computeAndLoadNextStep=function(){var e=new Promise((function(e,n){t.applyTransitivity(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.initQuestions()}))},this.hasTransitivity=function(){var e,n,r,i;try{for(var o=T(t.pairSequences),l=o.next();!l.done;l=o.next()){var s=l.value;try{for(var u=(r=void 0,T(t.pairSequences)),a=u.next();!a.done;a=u.next()){var c=a.value;if(c!=s&&s[1]==c[0]&&C(t.pairSequences,[s[0],c[1]]))return!0}}catch(e){r={error:e}}finally{try{a&&!a.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return!1},this.computeTransitiveElements=function(e){var n,r;try{for(var i=T(t.pairSequences),o=i.next();!o.done;o=i.next()){var l=o.value;if(l!=e&&e[1]==l[0]){var s=e[0]+"_"+l[1],u=l[1]+"_"+e[0];-1==t.pairsComputed.indexOf(s)&&t.pairsComputed.push(s),-1==t.pairsComputed.indexOf(u)&&t.pairsComputed.push(u),C(t.pairSequences,[e[0],l[1]])&&t.pairSequences.push([e[0],l[1]])}}}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},this.applyTransitivity=function(){var e,n;if(t.hasTransitivity()){var r=JSON.parse(JSON.stringify(t.pairSequences));try{for(var i=T(r),o=i.next();!o.done;o=i.next()){var l=o.value;t.computeTransitiveElements(l)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}t.applyTransitivity()}},this.computePriorities=function(){var e=new Promise((function(e,n){t.sortResults(),e("Results sorted."),n("Results not sorted.")}));e.then((function(){t.getLoosers()})).then((function(){t.comfortLooser()})).then((function(){t.hasDuplicate()?console.warn("Finally there is duplicates. Fix it."):t.writeResults()}))},this.hasDuplicate=function(){var e=[];for(var n in t.results){if(-1!=e.indexOf(t.results[n]))return!0;e.push(t.results[n])}return!1},this.sortResults=function(){var e,n;try{for(var r=T(t.pairSequences),i=r.next();!i.done;i=r.next()){var o=i.value;-1==Object.keys(t.results).indexOf(o[0])?t.results[o[0]]=1:t.results[o[0]]+=1}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},this.writeResults=function(){var e,n,r=Object.entries(t.results).sort((function(e,t){return t[1]-e[1]})),i=1;b.testCombinations.innerHTML="";try{for(var o=T(r),l=o.next();!l.done;l=o.next()){var s=l.value,u=x(null,null,null,null,null,i.toString()+" - "+t.list[s[0].toString()]);b.testCombinations.appendChild(u),i+=1}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}},this.comfortLooser=function(){var e,n;if(t.loosers.length>0)try{for(var r=T(t.loosers),i=r.next();!i.done;i=r.next()){var o=i.value;t.results[o]=0}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},this.getLoosers=function(){if(Object.keys(t.list).length>Object.keys(t.results).length)for(var e in t.list)-1==Object.keys(t.results).indexOf(e)&&t.loosers.push(e)},this.list=e,this.pairsComputed=[],this.pairsTransitivityApplied=[],this.couplesToCompute=[],this.pairSequences=[],this.finalSequences=[],this.allPairs=[],this.questionStep=1,this.questionIter=1,this.results={},this.loosers=[]}return e.prototype.generateAllPairs=function(){var e,t,n,r=(n=Object.keys(this.list)).flatMap((function(e){return n.flatMap((function(t){return e!=t?[[e,t]]:[]}))}));try{for(var i=T(r),o=i.next();!o.done;o=i.next()){var l=o.value.join("_");this.allPairs.push(l)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}},e.prototype.showNextCouple=function(e){var t=parseInt(e.dataset.iter),n=t+1,r=document.getElementById("btn-wrapper-"+t.toString()),i=document.getElementById("btn-wrapper-"+n.toString());r.classList.remove("show"),r.classList.add("hidden"),i.classList.remove("hidden"),i.classList.add("show")},e}(),E=function(){var e=this;this.eventListenerOutsideTextarea=function(t){y.newList.contains(t.target)||e.disableTextarea()},this.disableTextarea=function(){y.newList.classList.add("inactive"),y.newList.blur(),window.removeEventListener("click",e.eventListenerOutsideTextarea)},this.eventListenerTextarea=function(){y.newList.addEventListener("click",(function(t){y.newList.classList.contains("inactive")?(y.newList.classList.remove("inactive"),window.addEventListener("click",e.eventListenerOutsideTextarea)):e.disableTextarea()})),y.newList.addEventListener("input",(function(t){-1!=y.newList.value.indexOf("\n")?(y.btnComputeList.disabled=!1,y.btnComputeList.addEventListener("click",e.eventListenerComputeBtn)):(y.btnComputeList.disabled=!0,y.btnComputeList.removeEventListener("click",e.eventListenerComputeBtn))}))},this.buildList=function(){var e,t;if(-1!=y.newList.value.indexOf("\n")){var n=y.newList.value.split("\n"),r={},i=1;try{for(var o=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(n),l=o.next();!l.done;l=o.next()){var s=l.value;r[i.toString()]=s,i+=1}}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}return r}return console.error("Il n'y a pas de saut de ligne détecté !"),null},this.eventListenerComputeBtn=function(t){var n;v.screenNewList.classList.add("hide-screen"),v.screenComputeList.classList.remove("hide-screen");var r=new Promise((function(t,r){n=e.buildList(),t("List built."),r("List not built.")}));r.then((function(){new S(n).launch()}))},this.eventListenerTextarea()},_={languageSelector:document.getElementById("prtz-language")},j={fr:{"create-list":"nouvelle liste","open-list":"charger une liste","site-slogan":"établir des priorités simplement",help:"aide","compute-list":"commencer","new-list-tip-1":"entrez les éléments à prioriser ci-dessus :<br>(un élément par ligne)"},en:{"create-list":"new list","open-list":"load list","site-slogan":"simply prioritize",help:"help","compute-list":"start","new-list-tip-1":"Enter items to prioritize below:<br>(one item per line)"}},O=function(e){void 0===e&&(e=_.languageSelector.value),document.documentElement.lang=e},I=function(e){void 0===e&&(e=_.languageSelector.value);var t=document.getElementsByClassName("prtz-i18n");Array.from(t).forEach((function(t){t.innerHTML=j[e][t.id.split("i18n-")[1]]}))};window.addEventListener("DOMContentLoaded",(function(e){(new q).start()}));var q=function(){function e(){this.home=new m,new E,this.eventListenerLanguageSelector()}return e.prototype.start=function(){O(),I()},e.prototype.eventListenerLanguageSelector=function(){_.languageSelector.addEventListener("change",(function(){O(this.value),I(this.value)}))},e}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
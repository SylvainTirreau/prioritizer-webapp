(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();const t=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))},n=function(e){return new this((function(t,n){if(!e||void 0===e.length)return n(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var i=r.length;function o(e,n){if(n&&("object"==typeof n||"function"==typeof n)){var l=n.then;if("function"==typeof l)return void l.call(n,(function(t){o(e,t)}),(function(n){r[e]={status:"rejected",reason:n},0==--i&&t(r)}))}r[e]={status:"fulfilled",value:n},0==--i&&t(r)}for(var l=0;l<r.length;l++)o(l,r[l])}))};var r=setTimeout;function i(e){return Boolean(e&&void 0!==e.length)}function o(){}function l(e){if(!(this instanceof l))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],d(e,this)}function u(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,l._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value)}catch(e){return void a(t.promise,e)}s(t.promise,r)}else(1===e._state?s:a)(t.promise,e._value)}))):e._deferreds.push(t)}function s(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof l)return e._state=3,e._value=t,void c(e);if("function"==typeof n)return void d((r=n,i=t,function(){r.apply(i,arguments)}),e)}e._state=1,e._value=t,c(e)}catch(t){a(e,t)}var r,i}function a(e,t){e._state=2,e._value=t,c(e)}function c(e){2===e._state&&0===e._deferreds.length&&l._immediateFn((function(){e._handled||l._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)u(e,e._deferreds[t]);e._deferreds=null}function f(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}function d(e,t){var n=!1;try{e((function(e){n||(n=!0,s(t,e))}),(function(e){n||(n=!0,a(t,e))}))}catch(e){if(n)return;n=!0,a(t,e)}}l.prototype.catch=function(e){return this.then(null,e)},l.prototype.then=function(e,t){var n=new this.constructor(o);return u(this,new f(e,t,n)),n},l.prototype.finally=t,l.all=function(e){return new l((function(t,n){if(!i(e))return n(new TypeError("Promise.all accepts an array"));var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function l(e,i){try{if(i&&("object"==typeof i||"function"==typeof i)){var u=i.then;if("function"==typeof u)return void u.call(i,(function(t){l(e,t)}),n)}r[e]=i,0==--o&&t(r)}catch(e){n(e)}}for(var u=0;u<r.length;u++)l(u,r[u])}))},l.allSettled=n,l.resolve=function(e){return e&&"object"==typeof e&&e.constructor===l?e:new l((function(t){t(e)}))},l.reject=function(e){return new l((function(t,n){n(e)}))},l.race=function(e){return new l((function(t,n){if(!i(e))return n(new TypeError("Promise.race accepts an array"));for(var r=0,o=e.length;r<o;r++)l.resolve(e[r]).then(t,n)}))},l._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){r(e,0)},l._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};const p=l;var h=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e.g)return e.g;throw new Error("unable to locate global object")}();"function"!=typeof h.Promise?h.Promise=p:(h.Promise.prototype.finally||(h.Promise.prototype.finally=t),h.Promise.allSettled||(h.Promise.allSettled=n));var v={testCombinations:document.getElementById("prtz-test-combinations"),testLogs:document.getElementById("prtz-test-logs"),testListSorted:document.getElementById("test-list-sorted"),testTimeLeft:document.getElementById("test-time-left")},y=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},m=function(e,t,n,r,i,o,l,u){var s,a;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===r&&(r=null),void 0===i&&(i=null),void 0===o&&(o=null),void 0===l&&(l=null),void 0===u&&(u=null);var c=document.createElement("div");if(null!==e&&(c.id=e),null!==t)try{for(var f=y(t),d=f.next();!d.done;d=f.next()){var p=d.value;c.classList.add(p)}}catch(e){s={error:e}}finally{try{d&&!d.done&&(a=f.return)&&a.call(f)}finally{if(s)throw s.error}}if(null!==n&&(c.style.cssText=n),null!==r)for(var h in r)c.setAttribute("data-"+h,r[h]);return null!==i&&(c.innerHTML=i),null!==i&&(c.innerHTML=i),null!==o&&(c.innerText=o),null!=l&&("true"==l?c.contentEditable="true":"false"==l&&(c.contentEditable="false")),null!==u&&c.appendChild(u),c},b=function(e,t,n,r,i,o,l,u){var s,a;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===r&&(r=null),void 0===i&&(i=null),void 0===o&&(o=null),void 0===l&&(l=null),void 0===u&&(u=null);var c=document.createElement("button");if(null!==e&&(c.id=e),null!==t)try{for(var f=y(t),d=f.next();!d.done;d=f.next()){var p=d.value;c.classList.add(p)}}catch(e){s={error:e}}finally{try{d&&!d.done&&(a=f.return)&&a.call(f)}finally{if(s)throw s.error}}if(null!==n&&(c.style.cssText=n),null!==r)for(var h in r)c.setAttribute("data-"+h,r[h]);return null!==i&&(c.title=i),null!==o&&(c.innerHTML=o),null!==o&&(c.innerHTML=o),null!==l&&(c.innerText=l),null!==u&&c.appendChild(u),c},w=function(e,t,n,r,i,o,l){var u,s;void 0===e&&(e=null),void 0===t&&(t=null),void 0===n&&(n=null),void 0===r&&(r=null),void 0===i&&(i=null),void 0===o&&(o=null),void 0===l&&(l=null);var a=document.createElement("p");if(null!==e&&(a.id=e),null!==t)try{for(var c=y(t),f=c.next();!f.done;f=c.next()){var d=f.value;a.classList.add(d)}}catch(e){u={error:e}}finally{try{f&&!f.done&&(s=c.return)&&s.call(c)}finally{if(u)throw u.error}}if(null!==n&&(a.style.cssText=n),null!==r)for(var p in r)a.setAttribute("data-"+p,r[p]);return null!==i&&(a.innerHTML=i),null!==i&&(a.innerHTML=i),null!==o&&(a.innerText=o),null!==l&&a.appendChild(l),a},g=function(e,t){var n=JSON.stringify(t);return-1==JSON.stringify(e).indexOf(n)},C=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},x=function(){function e(e){var t=this;this.computeCouples=function(){var e,n;t.couplesToCompute=[];var r=t.questionStep,i=t.questionStep+t.questionIter;try{for(var o=C(function(e,t,n){var r;return void 0===e&&(e=0),void 0===t&&(t=null),void 0===n&&(n=1),function(e,t){var n,r,i,o,l={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;l;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return l.label++,{value:o[1],done:!1};case 5:l.label++,r=o[1],o=[0];continue;case 7:o=l.ops.pop(),l.trys.pop();continue;default:if(!((i=(i=l.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){l=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){l.label=o[1];break}if(6===o[0]&&l.label<i[1]){l.label=i[1],i=o;break}if(i&&l.label<i[2]){l.label=i[2],l.ops.push(o);break}i[2]&&l.ops.pop(),l.trys.pop();continue}o=t.call(e,l)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(i){switch(i.label){case 0:null==t&&(t=e,e=0),r=e,i.label=1;case 1:return r<t?[4,r]:[3,4];case 2:i.sent(),i.label=3;case 3:return r+=n,[3,1];case 4:return[2]}}))}(t.questionStep,Object.keys(t.list).length,t.questionIter)),l=o.next();!l.done;l=o.next()){l.value;var u=[r,i];-1==t.pairsComputed.indexOf(u.join("_"))&&i<=Object.keys(t.list).length&&t.couplesToCompute.push(u),r=i,i+=t.questionIter}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}t.questionIter+=1,0==t.couplesToCompute.length&&t.generateCouples()},this.generateCouples=function(){t.questionStep+t.questionIter<=Object.keys(t.list).length?t.computeCouples():t.questionStep!=Object.keys(t.list).length-1&&(t.questionStep+=1,t.questionIter=1,t.computeCouples())},this.initQuestions=function(){var e=new Promise((function(e,n){t.generateCouples(),e("Ids generated."),n("Ids not generated.")}));e.then((function(){t.writeButtons()}))},this.writeButtons=function(){var e,n;if(v.testCombinations.innerHTML="",t.couplesToCompute.length>0){var r=1,i=function(e){var n;n=1==r?"show":"hidden";var i="btn-wrapper-"+r.toString(),o=e.join("_"),l=([e[1],e[0]].join("_"),m(i,["btn-wrapper","d-flex","flex-column",n])),u=m(null,["d-flex","justify-content-center"]),s=m(null,["d-flex","justify-content-center"]),a=b(null,["btn","btn-primary","btn1"],null,{id:e[0],couple:o,iter:r.toString()},null,null,t.list[e[0]]),c=b(null,["btn","btn-primary","btn2"],null,{id:e[1],couple:o,iter:r.toString()},null,null,t.list[e[1]]);a.addEventListener("click",(function(){t.computeChoiceAndLoadNext(a)})),c.addEventListener("click",(function(){t.computeChoiceAndLoadNext(c)})),u.appendChild(a),s.appendChild(c),l.appendChild(u),l.appendChild(s),v.testCombinations.appendChild(l),r+=1};try{for(var o=C(t.couplesToCompute),l=o.next();!l.done;l=o.next())i(l.value)}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}}else t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2==0?t.computePriorities():console.error("Il ne devrait pas rester des paires non calculées. Or, il en reste",t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2)},this.computeAndWriteTimeLeft=function(){var e=new Promise((function(e,n){t.computeTimeLeft(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.writeTimeLeft()}))},this.computeTimeLeft=function(){var e=t.allPairs.filter((function(e){return!t.pairsComputed.includes(e)})).length/2*5;t.timeleft=function(e){var t=new Date(null);t.setSeconds(e);var n=t.toISOString().substring(11,19).split(":");return n[0]+"h "+n[1]+"mn "+n[2]+"s"}(e)},this.writeTimeLeft=function(){v.testTimeLeft.innerHTML="<b>Temps restant : </b>"+t.timeleft},this.computeChoiceAndLoadNext=function(e){var n=new Promise((function(n,r){var i=e.dataset.couple.split("_"),o=[i[1],i[0]].join("_");t.recordChoice(e.dataset.couple,o,e.dataset.id),n("Couples generated."),r("Couples not generated.")}));n.then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1?t.showNextCouple(e):t.computeAndLoadNextStep()})).then((function(){parseInt(e.dataset.iter)<=t.couplesToCompute.length-1&&t.computeAndWriteTimeLeft()}))},this.recordChoice=function(e,n,r){var i=e.split("_");i[0]==r?t.pairSequences.push([i[0],i[1]]):t.pairSequences.push([i[1],i[0]]),-1==t.pairsComputed.indexOf(e)&&t.pairsComputed.push(e),-1==t.pairsComputed.indexOf(n)&&t.pairsComputed.push(n)},this.computeAndLoadNextStep=function(){var e=new Promise((function(e,n){t.applyTransitivity(),e("Couples generated."),n("Couples not generated.")}));e.then((function(){t.initQuestions()}))},this.hasTransitivity=function(){var e,n,r,i;try{for(var o=C(t.pairSequences),l=o.next();!l.done;l=o.next()){var u=l.value;try{for(var s=(r=void 0,C(t.pairSequences)),a=s.next();!a.done;a=s.next()){var c=a.value;if(c!=u&&u[1]==c[0]&&g(t.pairSequences,[u[0],c[1]]))return!0}}catch(e){r={error:e}}finally{try{a&&!a.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}return!1},this.computeTransitiveElements=function(e){var n,r;try{for(var i=C(t.pairSequences),o=i.next();!o.done;o=i.next()){var l=o.value;if(l!=e&&e[1]==l[0]){var u=e[0]+"_"+l[1],s=l[1]+"_"+e[0];-1==t.pairsComputed.indexOf(u)&&t.pairsComputed.push(u),-1==t.pairsComputed.indexOf(s)&&t.pairsComputed.push(s),g(t.pairSequences,[e[0],l[1]])&&t.pairSequences.push([e[0],l[1]])}}}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},this.applyTransitivity=function(){var e,n;if(t.hasTransitivity()){var r=JSON.parse(JSON.stringify(t.pairSequences));try{for(var i=C(r),o=i.next();!o.done;o=i.next()){var l=o.value;t.computeTransitiveElements(l)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}t.applyTransitivity()}},this.computePriorities=function(){var e=new Promise((function(e,n){t.sortResults(),e("Results sorted."),n("Results not sorted.")}));e.then((function(){t.getLoosers()})).then((function(){t.comfortLooser()})).then((function(){t.hasDuplicate()?console.warn("Finally there is duplicates. Fix it."):t.writeResults()}))},this.hasDuplicate=function(){var e=[];for(var n in t.results){if(-1!=e.indexOf(t.results[n]))return!0;e.push(t.results[n])}return!1},this.sortResults=function(){var e,n;try{for(var r=C(t.pairSequences),i=r.next();!i.done;i=r.next()){var o=i.value;-1==Object.keys(t.results).indexOf(o[0])?t.results[o[0]]=1:t.results[o[0]]+=1}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},this.writeResults=function(){var e,n,r=Object.entries(t.results).sort((function(e,t){return t[1]-e[1]})),i=1;v.testCombinations.innerHTML="";try{for(var o=C(r),l=o.next();!l.done;l=o.next()){var u=l.value,s=w(null,null,null,null,null,i.toString()+" - "+t.list[u[0].toString()]);v.testCombinations.appendChild(s),i+=1}}catch(t){e={error:t}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}},this.comfortLooser=function(){var e,n;if(t.loosers.length>0)try{for(var r=C(t.loosers),i=r.next();!i.done;i=r.next()){var o=i.value;t.results[o]=0}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},this.getLoosers=function(){if(Object.keys(t.list).length>Object.keys(t.results).length)for(var e in t.list)-1==Object.keys(t.results).indexOf(e)&&t.loosers.push(e)},this.list=e,this.pairsComputed=[],this.pairsTransitivityApplied=[],this.couplesToCompute=[],this.pairSequences=[],this.finalSequences=[],this.allPairs=[],this.questionStep=1,this.questionIter=1,this.results={},this.loosers=[],this.generateAllPairs(),this.initQuestions()}return e.prototype.generateAllPairs=function(){var e,t,n,r=(n=Object.keys(this.list)).flatMap((function(e){return n.flatMap((function(t){return e!=t?[[e,t]]:[]}))}));try{for(var i=C(r),o=i.next();!o.done;o=i.next()){var l=o.value.join("_");this.allPairs.push(l)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}},e.prototype.showNextCouple=function(e){var t=parseInt(e.dataset.iter),n=t+1,r=document.getElementById("btn-wrapper-"+t.toString()),i=document.getElementById("btn-wrapper-"+n.toString());r.classList.remove("show"),r.classList.add("hidden"),i.classList.remove("hidden"),i.classList.add("show")},e}(),T={1:"Abricot",2:"Airelle",3:"Amande",4:"Ananas",5:"Avocat",6:"Banane",7:"Cassis",8:"Cerise",9:"Châtaigne",10:"Citron"};window.addEventListener("DOMContentLoaded",(function(e){(new S).start()}));var S=function(){function e(){new x(T)}return e.prototype.start=function(){},e}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,